import type { Meta, StoryObj } from '@storybook/nextjs-vite';
import * as React from 'react';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';

const meta: Meta<typeof Textarea> = {
  title: 'UI/Textarea',
  component: Textarea,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    placeholder: {
      control: 'text',
      description: '–ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏',
    },
    disabled: {
      control: 'boolean',
      description: '–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    },
    rows: {
      control: 'number',
      description: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫',
    },
    value: {
      control: 'text',
      description: '–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏',
    },
    onChange: {
      action: 'changed',
      description: 'Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è',
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

// –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
export const Default: Story = {
  render: args => <Textarea {...args} className="w-[300px]" />,
  args: {
    placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å...',
  },
};

// –° –ª–µ–π–±–ª–æ–º
export const WithLabel: Story = {
  render: args => (
    <div className="space-y-2 w-[300px]">
      <Label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ</Label>
      <Textarea {...args} id="message" />
    </div>
  ),
  args: {
    placeholder: '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
  },
};

// –û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
export const Disabled: Story = {
  render: args => (
    <div className="space-y-2 w-[300px]">
      <Label htmlFor="disabled-textarea">–û—Ç–∫–ª—é—á–µ–Ω–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å</Label>
      <Textarea {...args} id="disabled-textarea" />
    </div>
  ),
  args: {
    disabled: true,
    placeholder: '–≠—Ç–æ –ø–æ–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ',
    value: '–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç',
  },
};

// –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
export const Sizes: Story = {
  render: args => (
    <div className="space-y-4 w-[400px]">
      <div className="space-y-2">
        <Label>–ú–∞–ª–µ–Ω—å–∫–∞—è (3 —Å—Ç—Ä–æ–∫–∏)</Label>
        <Textarea
          {...args}
          rows={3}
          placeholder="–ú–∞–ª–µ–Ω—å–∫–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å..."
        />
      </div>
      <div className="space-y-2">
        <Label>–°—Ä–µ–¥–Ω—è—è (5 —Å—Ç—Ä–æ–∫)</Label>
        <Textarea
          {...args}
          rows={5}
          placeholder="–°—Ä–µ–¥–Ω—è—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å..."
        />
      </div>
      <div className="space-y-2">
        <Label>–ë–æ–ª—å—à–∞—è (8 —Å—Ç—Ä–æ–∫)</Label>
        <Textarea
          {...args}
          rows={8}
          placeholder="–ë–æ–ª—å—à–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å..."
        />
      </div>
    </div>
  ),
  args: {},
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è —Å –æ—à–∏–±–∫–æ–π
export const WithError: Story = {
  render: args => (
    <div className="space-y-2 w-[300px]">
      <Label htmlFor="error-textarea">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π *</Label>
      <Textarea
        {...args}
        id="error-textarea"
        className="border-destructive focus-visible:ring-destructive"
      />
      <p className="text-sm text-destructive">
        –≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
      </p>
    </div>
  ),
  args: {
    placeholder: '–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...',
  },
};

// –£—Å–ø–µ—à–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
export const WithSuccess: Story = {
  render: args => (
    <div className="space-y-2 w-[300px]">
      <Label htmlFor="success-textarea">–û—Ç–∑—ã–≤</Label>
      <Textarea
        {...args}
        id="success-textarea"
        className="border-green-500 focus-visible:ring-green-500"
      />
      <p className="text-sm text-green-600">–û—Ç–ª–∏—á–Ω–æ! –í–∞—à –æ—Ç–∑—ã–≤ –ø—Ä–∏–Ω—è—Ç</p>
    </div>
  ),
  args: {
    value: '–û—Ç–ª–∏—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å, –æ—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω –∫–∞—á–µ—Å—Ç–≤–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è!',
  },
};

// –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
export const FeedbackForm: Story = {
  render: args => (
    <Card className="w-[400px]">
      <CardHeader>
        <CardTitle>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</CardTitle>
        <CardDescription>
          –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="subject">–¢–µ–º–∞</Label>
          <input
            id="subject"
            className="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50"
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="feedback">–í–∞—à –æ—Ç–∑—ã–≤</Label>
          <Textarea
            {...args}
            id="feedback"
            rows={6}
            placeholder="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–∏—Ç–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö..."
          />
        </div>
        <div className="flex gap-2">
          <Button variant="outline">–û—Ç–º–µ–Ω–∞</Button>
          <Button>–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤</Button>
        </div>
      </CardContent>
    </Card>
  ),
  args: {},
};

// –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
export const ChatMessage: Story = {
  render: args => (
    <Card className="w-[350px]">
      <CardContent className="p-4">
        <div className="space-y-3">
          <div className="space-y-2">
            <Label htmlFor="chat-message">–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</Label>
            <Textarea
              {...args}
              id="chat-message"
              rows={3}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
            />
          </div>
          <div className="flex items-center justify-between">
            <span className="text-xs text-muted-foreground">
              0/500 —Å–∏–º–≤–æ–ª–æ–≤
            </span>
            <div className="flex gap-2">
              <Button variant="ghost" size="sm">
                üìé
              </Button>
              <Button size="sm">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</Button>
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  ),
  args: {},
};

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Å –ø–æ–¥—Å—á–µ—Ç–æ–º —Å–∏–º–≤–æ–ª–æ–≤
export const InteractiveExample: Story = {
  render: args => {
    const [value, setValue] = React.useState('');
    const maxLength = 250;

    return (
      <div className="space-y-4 w-[400px]">
        <Card>
          <CardHeader>
            <CardTitle>–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç</CardTitle>
            <CardDescription>
              –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏ —Å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ–º
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="interactive-textarea">–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞</Label>
              <Textarea
                {...args}
                id="interactive-textarea"
                value={value}
                onChange={e => setValue(e.target.value)}
                rows={4}
                placeholder="–û —á–µ–º –≤—ã –¥—É–º–∞–µ—Ç–µ?"
                maxLength={maxLength}
              />
              <div className="flex items-center justify-between text-xs">
                <span
                  className={`${value.length > maxLength * 0.8 ? 'text-destructive' : 'text-muted-foreground'}`}
                >
                  {value.length}/{maxLength} —Å–∏–º–≤–æ–ª–æ–≤
                </span>
                {value.length > 0 && (
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setValue('')}
                  >
                    –û—á–∏—Å—Ç–∏—Ç—å
                  </Button>
                )}
              </div>
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                disabled={value.length === 0}
                onClick={() => setValue('')}
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
              <Button disabled={value.length === 0 || value.length > maxLength}>
                –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
              </Button>
            </div>
          </CardContent>
        </Card>

        {value.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="text-sm">
                –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm">{value || '–í–∞—à –ø–æ—Å—Ç –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å...'}</p>
            </CardContent>
          </Card>
        )}
      </div>
    );
  },
  args: {},
};
