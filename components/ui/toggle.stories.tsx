import type { Meta, StoryObj } from '@storybook/nextjs-vite';
import * as React from 'react';
import { Toggle } from '@/components/ui/toggle';
import {
  Bold,
  Italic,
  Underline,
  AlignLeft,
  AlignCenter,
  AlignRight,
  Volume2,
  VolumeX,
  Play,
  Pause,
  Heart,
  Star,
  Bookmark,
  Eye,
  EyeOff,
  Sun,
  Moon,
  Wifi,
  WifiOff,
  Bluetooth,
  BluetoothConnected,
} from 'lucide-react';

const meta: Meta<typeof Toggle> = {
  title: 'UI/Toggle',
  component: Toggle,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    variant: {
      control: 'select',
      options: ['default', 'outline'],
      description: '–í–∞—Ä–∏–∞–Ω—Ç —Å—Ç–∏–ª—è –∫–Ω–æ–ø–∫–∏',
    },
    size: {
      control: 'select',
      options: ['default', 'sm', 'lg'],
      description: '–†–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏',
    },
    disabled: {
      control: 'boolean',
      description: '–û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    },
    pressed: {
      control: 'boolean',
      description: '–ù–∞–∂–∞—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ',
    },
    onPressedChange: {
      action: 'pressedChanged',
      description: 'Callback –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

// –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
export const Default: Story = {
  render: args => (
    <Toggle {...args}>
      <Bold className="h-4 w-4" />
    </Toggle>
  ),
  args: {},
};

// –í–∞—Ä–∏–∞–Ω—Ç—ã
export const Variants: Story = {
  render: args => (
    <div className="flex items-center space-x-2">
      <Toggle {...args} variant="default">
        <Bold className="h-4 w-4" />
      </Toggle>
      <Toggle {...args} variant="outline">
        <Italic className="h-4 w-4" />
      </Toggle>
    </div>
  ),
  args: {},
};

// –†–∞–∑–º–µ—Ä—ã
export const Sizes: Story = {
  render: args => (
    <div className="flex items-center space-x-2">
      <Toggle {...args} size="sm">
        <Bold className="h-3 w-3" />
      </Toggle>
      <Toggle {...args} size="default">
        <Bold className="h-4 w-4" />
      </Toggle>
      <Toggle {...args} size="lg">
        <Bold className="h-5 w-5" />
      </Toggle>
    </div>
  ),
  args: {},
};

// –° —Ç–µ–∫—Å—Ç–æ–º
export const WithText: Story = {
  render: args => (
    <div className="flex items-center space-x-2">
      <Toggle {...args}>
        <Bold className="h-4 w-4 mr-2" />
        –ñ–∏—Ä–Ω—ã–π
      </Toggle>
      <Toggle {...args}>
        <Italic className="h-4 w-4 mr-2" />
        –ö—É—Ä—Å–∏–≤
      </Toggle>
      <Toggle {...args}>
        <Underline className="h-4 w-4 mr-2" />
        –ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π
      </Toggle>
    </div>
  ),
  args: {},
};

// –û—Ç–∫–ª—é—á–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
export const Disabled: Story = {
  render: args => (
    <div className="flex items-center space-x-2">
      <Toggle {...args} disabled>
        <Bold className="h-4 w-4" />
      </Toggle>
      <Toggle {...args} disabled pressed>
        <Italic className="h-4 w-4" />
      </Toggle>
    </div>
  ),
  args: {},
};

// –ü–∞–Ω–µ–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
export const TextFormatting: Story = {
  render: args => (
    <div className="space-y-4">
      <h3 className="text-sm font-medium">–ü–∞–Ω–µ–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞</h3>
      <div className="flex items-center space-x-1 p-2 border rounded-md">
        <Toggle {...args} size="sm">
          <Bold className="h-4 w-4" />
        </Toggle>
        <Toggle {...args} size="sm">
          <Italic className="h-4 w-4" />
        </Toggle>
        <Toggle {...args} size="sm">
          <Underline className="h-4 w-4" />
        </Toggle>
        <div className="w-px h-6 bg-border mx-1" />
        <Toggle {...args} size="sm">
          <AlignLeft className="h-4 w-4" />
        </Toggle>
        <Toggle {...args} size="sm">
          <AlignCenter className="h-4 w-4" />
        </Toggle>
        <Toggle {...args} size="sm">
          <AlignRight className="h-4 w-4" />
        </Toggle>
      </div>
    </div>
  ),
  args: {},
};

// –ú–µ–¥–∏–∞–ø–ª–µ–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª—ã
export const MediaControls: Story = {
  render: args => {
    const [isPlaying, setIsPlaying] = React.useState(false);
    const [isMuted, setIsMuted] = React.useState(false);

    return (
      <div className="space-y-4">
        <h3 className="text-sm font-medium">–ú–µ–¥–∏–∞–ø–ª–µ–µ—Ä</h3>
        <div className="flex items-center space-x-2 p-3 border rounded-md">
          <Toggle {...args} pressed={isPlaying} onPressedChange={setIsPlaying}>
            {isPlaying ? (
              <Pause className="h-4 w-4" />
            ) : (
              <Play className="h-4 w-4" />
            )}
          </Toggle>
          <Toggle {...args} pressed={isMuted} onPressedChange={setIsMuted}>
            {isMuted ? (
              <VolumeX className="h-4 w-4" />
            ) : (
              <Volume2 className="h-4 w-4" />
            )}
          </Toggle>
        </div>
        <div className="text-sm text-muted-foreground">
          –°—Ç–∞—Ç—É—Å: {isPlaying ? '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ' : '–ü–∞—É–∑–∞'} | –ó–≤—É–∫:{' '}
          {isMuted ? '–í—ã–∫–ª—é—á–µ–Ω' : '–í–∫–ª—é—á–µ–Ω'}
        </div>
      </div>
    );
  },
  args: {},
};

// –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
export const SocialActions: Story = {
  render: args => {
    const [isLiked, setIsLiked] = React.useState(false);
    const [isStarred, setIsStarred] = React.useState(false);
    const [isBookmarked, setIsBookmarked] = React.useState(false);

    return (
      <div className="space-y-4">
        <h3 className="text-sm font-medium">–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h3>
        <div className="flex items-center space-x-2 p-3 border rounded-md">
          <Toggle
            {...args}
            pressed={isLiked}
            onPressedChange={setIsLiked}
            variant="outline"
          >
            <Heart
              className={`h-4 w-4 ${isLiked ? 'fill-red-500 text-red-500' : ''}`}
            />
          </Toggle>
          <Toggle
            {...args}
            pressed={isStarred}
            onPressedChange={setIsStarred}
            variant="outline"
          >
            <Star
              className={`h-4 w-4 ${isStarred ? 'fill-yellow-500 text-yellow-500' : ''}`}
            />
          </Toggle>
          <Toggle
            {...args}
            pressed={isBookmarked}
            onPressedChange={setIsBookmarked}
            variant="outline"
          >
            <Bookmark
              className={`h-4 w-4 ${isBookmarked ? 'fill-blue-500 text-blue-500' : ''}`}
            />
          </Toggle>
        </div>
        <div className="text-sm text-muted-foreground">
          {isLiked && '‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å'} {isStarred && '‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º'}{' '}
          {isBookmarked && 'üîñ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ'}
        </div>
      </div>
    );
  },
  args: {},
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏
export const VisibilityToggle: Story = {
  render: args => {
    const [isVisible, setIsVisible] = React.useState(true);

    return (
      <div className="space-y-4">
        <h3 className="text-sm font-medium">–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏</h3>
        <div className="flex items-center space-x-2">
          <Toggle {...args} pressed={isVisible} onPressedChange={setIsVisible}>
            {isVisible ? (
              <Eye className="h-4 w-4" />
            ) : (
              <EyeOff className="h-4 w-4" />
            )}
          </Toggle>
          <span className="text-sm">
            {isVisible ? '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∏–¥–∏–º–æ' : '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∫—Ä—ã—Ç–æ'}
          </span>
        </div>
        {isVisible && (
          <div className="p-3 border rounded-md">
            <p className="text-sm">–≠—Ç–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —Å–∫—Ä—ã—Ç—å</p>
          </div>
        )}
      </div>
    );
  },
  args: {},
};

// –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
export const SystemSettings: Story = {
  render: args => {
    const [isDarkMode, setIsDarkMode] = React.useState(false);
    const [isWifiOn, setIsWifiOn] = React.useState(true);
    const [isBluetoothOn, setIsBluetoothOn] = React.useState(false);

    return (
      <div className="space-y-4">
        <h3 className="text-sm font-medium">–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</h3>
        <div className="space-y-3 p-3 border rounded-md">
          <div className="flex items-center justify-between">
            <span className="text-sm">–¢–µ–º–Ω–∞—è —Ç–µ–º–∞</span>
            <Toggle
              {...args}
              pressed={isDarkMode}
              onPressedChange={setIsDarkMode}
              size="sm"
            >
              {isDarkMode ? (
                <Moon className="h-4 w-4" />
              ) : (
                <Sun className="h-4 w-4" />
              )}
            </Toggle>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-sm">Wi-Fi</span>
            <Toggle
              {...args}
              pressed={isWifiOn}
              onPressedChange={setIsWifiOn}
              size="sm"
            >
              {isWifiOn ? (
                <Wifi className="h-4 w-4" />
              ) : (
                <WifiOff className="h-4 w-4" />
              )}
            </Toggle>
          </div>
          <div className="flex items-center justify-between">
            <span className="text-sm">Bluetooth</span>
            <Toggle
              {...args}
              pressed={isBluetoothOn}
              onPressedChange={setIsBluetoothOn}
              size="sm"
            >
              {isBluetoothOn ? (
                <BluetoothConnected className="h-4 w-4" />
              ) : (
                <Bluetooth className="h-4 w-4" />
              )}
            </Toggle>
          </div>
        </div>
      </div>
    );
  },
  args: {},
};

// –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä
export const InteractiveExample: Story = {
  render: args => {
    const [toggleStates, setToggleStates] = React.useState({
      bold: false,
      italic: false,
      underline: false,
      alignLeft: true,
      alignCenter: false,
      alignRight: false,
    });

    const handleToggle = (key: string) => {
      if (key.startsWith('align')) {
        // –î–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è - —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω
        setToggleStates(prev => ({
          ...prev,
          alignLeft: key === 'alignLeft',
          alignCenter: key === 'alignCenter',
          alignRight: key === 'alignRight',
        }));
      } else {
        setToggleStates(prev => ({
          ...prev,
          [key]: !prev[key as keyof typeof prev],
        }));
      }
    };

    const getTextStyle = () => {
      let style = '';
      if (toggleStates.bold) style += 'font-bold ';
      if (toggleStates.italic) style += 'italic ';
      if (toggleStates.underline) style += 'underline ';
      if (toggleStates.alignLeft) style += 'text-left ';
      if (toggleStates.alignCenter) style += 'text-center ';
      if (toggleStates.alignRight) style += 'text-right ';
      return style;
    };

    return (
      <div className="space-y-4 w-[400px]">
        <h3 className="text-sm font-medium">–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞</h3>

        <div className="flex items-center space-x-1 p-2 border rounded-md">
          <Toggle
            {...args}
            pressed={toggleStates.bold}
            onPressedChange={() => handleToggle('bold')}
            size="sm"
          >
            <Bold className="h-4 w-4" />
          </Toggle>
          <Toggle
            {...args}
            pressed={toggleStates.italic}
            onPressedChange={() => handleToggle('italic')}
            size="sm"
          >
            <Italic className="h-4 w-4" />
          </Toggle>
          <Toggle
            {...args}
            pressed={toggleStates.underline}
            onPressedChange={() => handleToggle('underline')}
            size="sm"
          >
            <Underline className="h-4 w-4" />
          </Toggle>

          <div className="w-px h-6 bg-border mx-1" />

          <Toggle
            {...args}
            pressed={toggleStates.alignLeft}
            onPressedChange={() => handleToggle('alignLeft')}
            size="sm"
          >
            <AlignLeft className="h-4 w-4" />
          </Toggle>
          <Toggle
            {...args}
            pressed={toggleStates.alignCenter}
            onPressedChange={() => handleToggle('alignCenter')}
            size="sm"
          >
            <AlignCenter className="h-4 w-4" />
          </Toggle>
          <Toggle
            {...args}
            pressed={toggleStates.alignRight}
            onPressedChange={() => handleToggle('alignRight')}
            size="sm"
          >
            <AlignRight className="h-4 w-4" />
          </Toggle>
        </div>

        <div className="p-4 border rounded-md min-h-[100px]">
          <p className={getTextStyle()}>
            –≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å
            —Å—Ç–∏–ª—å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ.
          </p>
        </div>

        <div className="text-xs text-muted-foreground">
          –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏:{' '}
          {Object.entries(toggleStates)
            .filter(([value]) => value)
            .map(([key]) => key)
            .join(', ') || '–Ω–µ—Ç'}
        </div>
      </div>
    );
  },
  args: {},
};
