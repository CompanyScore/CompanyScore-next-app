import axios from 'axios';

export const useApi = axios.create({
  baseURL: process.env.NEXT_PUBLIC_BACK,
});

// üëâ –î–æ–±–∞–≤–ª—è–µ–º accessToken –∏–∑ localStorage
useApi.interceptors.request.use(
  config => {
    const accessToken = localStorage.getItem('accessToken');
    if (accessToken) {
      config.headers['Authorization'] = `Bearer ${accessToken}`;
    }

    if (config.data instanceof FormData) {
      config.headers['Content-Type'] = 'multipart/form-data';
    } else {
      config.headers['Content-Type'] = 'application/json';
    }

    config.headers['Cache-Control'] = 'no-cache';
    config.headers['Pragma'] = 'no-cache';
    config.headers['Expires'] = '0';

    return config;
  },
  error => Promise.reject(error),
);

// üëâ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ 401
useApi.interceptors.response.use(
  response => response,
  async error => {
    const originalRequest = error.config;

    if (
      error.response?.status === 401 &&
      !originalRequest._retry // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏—è
    ) {
      originalRequest._retry = true;

      try {
        const refreshToken = localStorage.getItem('refreshToken');
        if (!refreshToken) throw new Error('–ù–µ—Ç refreshToken');

        const { data } = await axios.post(
          `${process.env.NEXT_PUBLIC_BACK}/auth/refresh`,
          { refreshToken },
          {
            headers: {
              'Content-Type': 'application/json',
            },
          },
        );

        localStorage.setItem('accessToken', data.accessToken);

        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
        originalRequest.headers['Authorization'] = `Bearer ${data.accessToken}`;
        return useApi.request(originalRequest);
      } catch (refreshError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', refreshError);
        // –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ login
        localStorage.removeItem('accessToken');
        localStorage.removeItem('refreshToken');
        window.location.href = '/login';
        return Promise.reject(refreshError);
      }
    }

    return Promise.reject(error);
  },
);
