"use client";

import { useState, useEffect } from "react";
import { useCommentsStore, useUserStore } from "@/store";
import { Button, Dropdown, Modal, Textarea, Title, Toast } from "@/ui";
import { positions } from "@/shared";
import { useApi } from "@/hook";

type ProfileEditCommentModalProps = {
  comment?: { id: number; text: string; rating: number; position?: string };
};

export function ProfileEditCommentModal({
  comment,
}: ProfileEditCommentModalProps) {
  const { userId } = useUserStore();
  const { loading, getComments, updateComment } = useCommentsStore();

  const [editedText, setEditedText] = useState("");
  const [editedRating, setEditedRating] = useState(0);
  const [editedPosition, setEditedPosition] = useState("");
  const [validation, setValidation] = useState<string | null>(null);
  const [toast, setToast] = useState<{ message: string; type?: string } | null>(
    null,
  );

  useEffect(() => {
    if (comment) {
      setEditedText(comment.text || "");
      setEditedRating(comment.rating || 0);
      setEditedPosition(comment.position || "");
    }
  }, [comment]);

  const onSubmit = async () => {
    if (!editedText.trim() || editedRating === 0 || !editedPosition) {
      setValidation("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞, —Ä–µ–π—Ç–∏–Ω–≥ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å.");
      return;
    }

    await updateComment(comment!.id, editedText, editedRating, editedPosition);
    if (userId) {
      getComments(userId);
    }
  };

  const handleTextareaChange = (newSearchedValue: string) => {
    setEditedText(newSearchedValue);
  };

  return (
    <Modal id="profile-edit-comment-modal">
      <Title size="3" position="center">
        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
      </Title>
      <div className="mb-4">
        <label htmlFor="position" className="block mb-2">
          –î–æ–ª–∂–Ω–æ—Å—Ç—å
        </label>
        <Dropdown
          width="450px"
          isFirstDisabled={true}
          options={positions}
          selectedValue={editedPosition}
          onSelect={setEditedPosition}
        />
      </div>
      <div className="mb-4">
        <label htmlFor="comment" className="block mb-2">
          –û—Ç–∑—ã–≤
        </label>
        <Textarea
          value={editedText}
          placeholder={`–†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –æ–∫–æ–ª–æ –¥–≤—É—Ö –ª–µ—Ç. –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞—è ‚Äì 20 —á–µ–ª–æ–≤–µ–∫, –∞ –µ—â—ë –¥–≤–∞ —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏ –æ–¥–Ω–∞ –ø—É—à–∏—Å—Ç–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞.

–ü–ª—é—Å—ã: –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äì –∫–æ—à–µ–ª—ë–∫ –±—ã–ª —Å—á–∞—Å—Ç–ª–∏–≤! –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–µ—Å—ë–ª–∞—è, –∫–æ–ª–ª–µ–≥–∏ —Å –æ–≥–æ–Ω—å–∫–æ–º, –∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã —Ç–∞–∫–∏–µ, —á—Ç–æ –ø–æ—Ç–æ–º –µ—â—ë –¥–æ–ª–≥–æ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏. üòÑ
            
–ú–∏–Ω—É—Å—ã: –û—Ñ–∏—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äì —ç—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–æ –≤–æ—Ç –¥–æ—Ä–æ–≥–∞ —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 2 —á–∞—Å–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–∞—Å—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç—å.`}
          onChange={handleTextareaChange}
          rows={13}
        />
      </div>
      <div className="mb-4">
        <label htmlFor="rating" className="block mb-2">
          –û—Ü–µ–Ω–∫–∞
        </label>
        <div className="rating flex gap-2">
          {[...Array(10)].map((_, index) => (
            <span
              key={index + 1}
              className={`relative cursor-pointer mask mask-star-2 w-10 h-10 flex items-center justify-center ${
                editedRating >= index + 1 ? "bg-orange-400" : "bg-gray-300"
              }`}
              onClick={() => setEditedRating(index + 1)}
            >
              <span className="absolute text-xs font-bold text-white">
                {index + 1}
              </span>
            </span>
          ))}
        </div>
      </div>
      <Button
        onClick={onSubmit}
        disabled={!editedText.trim() || editedRating === 0 || !editedPosition}
      >
        –û–±–Ω–æ–≤–∏—Ç—å
      </Button>
      {toast && <Toast message={toast.message} type={toast.type} />}
    </Modal>
  );
}

export default ProfileEditCommentModal;
