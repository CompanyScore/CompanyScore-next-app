'use client';

import { Button, Dropdown, Modal, Textarea, Title, useToast } from '@/ui';
import { positions } from '@/constants';
import { useCommentsStore, useCompaniesStore } from '@/store';
import { useCommentForm } from '@/hook';

type Props = {
  companyId: string;
};

type CommentFormData = {
  comment: string;
  position: string;
  rating: number;
};

export function CompaniesPostCommentModal({ companyId }: Props) {
  const { getCompanies } = useCompaniesStore();
  const { getComments, postComment } = useCommentsStore();
  const toast = useToast();

  const {
    handleSubmit,
    setValue,
    watch,
    formState: { errors },
    reset,
  } = useCommentForm();

  const closeModal = () => {
    const modal = document.getElementById(
      'companies_add_comment_modal',
    ) as HTMLInputElement;
    if (modal) {
      modal.checked = false; // –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –º–æ–¥–∞–ª–∫—É –≤ daisyUI
    }
  };

  const resetForm = () => {
    reset();
    closeModal();
  };

  const onSubmit = async (data: CommentFormData) => {
    try {
      await postComment({
        text: data.comment,
        position: data.position,
        rating: data.rating,
        companyId,
      });
      await getCompanies({});
      await getComments({ companyId });
      toast.success('–û—Ç–∑—ã–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!');
      resetForm();
    } catch {
      const error = useCommentsStore.getState().error;
      toast.error(error || '–û—à–∏–±–∫–∞');
      resetForm();
    }
  };

  return (
    <Modal id="companies_add_comment_modal">
      <Title size="3" position="center">
        –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤
      </Title>

      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="mb-4">
          <label htmlFor="position" className="block mb-2">
            –î–æ–ª–∂–Ω–æ—Å—Ç—å
          </label>
          <Dropdown
            width="430px"
            options={positions}
            selectedValue={watch('position')}
            onSelect={value => setValue('position', value)}
          />
          <p className="text-error">{errors.position?.message}</p>
        </div>

        <div className="mb-4">
          <label htmlFor="comment" className="block mb-2">
            –û—Ç–∑—ã–≤
          </label>
          <Textarea
            value={watch('comment') || ''}
            onChange={value => setValue('comment', value)}
            placeholder={`–†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –æ–∫–æ–ª–æ –¥–≤—É—Ö –ª–µ—Ç. –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞—è ‚Äì 20 —á–µ–ª–æ–≤–µ–∫, –∞ –µ—â—ë –¥–≤–∞ —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏ –æ–¥–Ω–∞ –ø—É—à–∏—Å—Ç–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞.
  
–ü–ª—é—Å—ã: –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äì –∫–æ—à–µ–ª—ë–∫ –±—ã–ª —Å—á–∞—Å—Ç–ª–∏–≤! –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–µ—Å—ë–ª–∞—è, –∫–æ–ª–ª–µ–≥–∏ —Å –æ–≥–æ–Ω—å–∫–æ–º, –∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã —Ç–∞–∫–∏–µ, —á—Ç–æ –ø–æ—Ç–æ–º –µ—â—ë –¥–æ–ª–≥–æ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏. üòÑ
  
–ú–∏–Ω—É—Å—ã: –û—Ñ–∏—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äì —ç—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–æ –≤–æ—Ç –¥–æ—Ä–æ–≥–∞ —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 2 —á–∞—Å–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–∞—Å—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç—å.`}
            rows={13}
          />
          <p className="text-error">{errors.comment?.message}</p>
        </div>

        <div className="mb-4">
          <label htmlFor="rating" className="block mb-2">
            –û—Ü–µ–Ω–∫–∞
          </label>
          <div className="rating flex gap-2">
            {[...Array(10)].map((_, index) => (
              <span
                key={index + 1}
                className={`relative cursor-pointer mask mask-star-2 w-10 h-10 flex items-center justify-center ${
                  watch('rating') >= index + 1 ? 'bg-orange-400' : 'bg-gray-300'
                }`}
                onClick={() => setValue('rating', index + 1)}
              >
                <span className="absolute text-xs font-bold text-white">
                  {index + 1}
                </span>
              </span>
            ))}
          </div>
          <p className="text-error">{errors.rating?.message}</p>
        </div>

        <Button className="btn-primary w-full">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</Button>
      </form>
    </Modal>
  );
}
