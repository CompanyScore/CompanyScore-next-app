"use client";

import { useState } from "react";
import axios from "axios";
import { Dropdown } from "@/ui";

type CompaniesAddCommentModalProps = {
  companyId: number;
  userId: number;
  closeModal: () => void;
  refetch: () => void;
};

const positions = [
  { label: "Developer", value: "developer" },
  { label: "Frontend", value: "frontend" },
  { label: "Backend", value: "backend" },
  { label: "Full-stack", value: "fullstack" },
  { label: "QA Engineer", value: "qa" },
  { label: "Designer", value: "designer" },
  { label: "Project Manager", value: "project-manager" },
  { label: "DevOps Engineer", value: "devops" },
  { label: "System Administrator", value: "system-administrator" },
  { label: "Data Scientist", value: "data-scientist" },
  { label: "Product Manager", value: "product-manager" },
  { label: "Business Analyst", value: "business-analyst" },
  { label: "UX Designer", value: "ux" },
];

export function CompaniesAddCommentModal({
  companyId,
  userId,
  closeModal,
  refetch,
}: CompaniesAddCommentModalProps) {
  const [comment, setComment] = useState<string>("");
  const [rating, setRating] = useState<number>(0);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [position, setPosition] = useState<string>("");

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!comment.trim() || rating === 0 || !position) {
      setError(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–≤–µ–∑–¥—É –∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å.",
      );
      return;
    }

    const sanitizedText = comment.replace(/\n/g, " ");

    setLoading(true);
    setError(null);

    try {
      await axios.post("http://localhost:8080/comments", {
        text: sanitizedText,
        rating,
        position,
        userId,
        companyId,
      });

      setComment("");
      setRating(0);
      setPosition("");
      refetch();
      closeModal();
    } catch (error) {
      // console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:", error);
      if (error.response.data.errorCode === "comment_already_exists") {
        setError("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ —ç—Ç—É –∫–æ–º–ø–∞–Ω–∏—é");
      } else {
        setError(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        );
      }
    } finally {
      setLoading(false);
    }
  };

  const handleTextareaChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setComment(e.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <h2 className="text-2xl mb-4">–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤</h2>

      <div className="mb-4">
        <label htmlFor="position" className="block mb-2">
          –î–æ–ª–∂–Ω–æ—Å—Ç—å
        </label>
        <Dropdown
          isFirstDisabled={true}
          options={positions}
          selectedValue={position}
          onSelect={setPosition}
        />
      </div>

      <div className="mb-4">
        <label htmlFor="comment" className="block mb-2">
          –û—Ç–∑—ã–≤
        </label>
        <textarea
          value={comment}
          placeholder={`–†–∞–±–æ—Ç–∞–ª –Ω–∞–¥ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º –æ–∫–æ–ª–æ –¥–≤—É—Ö –ª–µ—Ç. –ö–æ–º–∞–Ω–¥–∞ –±—ã–ª–∞ —Ö–æ—Ä–æ—à–∞—è ‚Äì 20 —á–µ–ª–æ–≤–µ–∫, –∞ –µ—â—ë –¥–≤–∞ —á–µ—Ç–≤–µ—Ä–æ–Ω–æ–≥–∏—Ö –æ—Ö—Ä–∞–Ω–Ω–∏–∫–∞ –∏ –æ–¥–Ω–∞ –ø—É—à–∏—Å—Ç–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—ë—Ä –∫–∞—á–µ—Å—Ç–≤–∞.

–ü–ª—é—Å—ã: –û—Ç–ª–∏—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ ‚Äì –∫–æ—à–µ–ª—ë–∫ –±—ã–ª —Å—á–∞—Å—Ç–ª–∏–≤! –ê—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≤–µ—Å—ë–ª–∞—è, –∫–æ–ª–ª–µ–≥–∏ —Å –æ–≥–æ–Ω—å–∫–æ–º, –∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤—ã —Ç–∞–∫–∏–µ, —á—Ç–æ –ø–æ—Ç–æ–º –µ—â—ë –¥–æ–ª–≥–æ –≤—Å–ø–æ–º–∏–Ω–∞–ª–∏. üòÑ

–ú–∏–Ω—É—Å—ã: –û—Ñ–∏—Å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚Äì —ç—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, –Ω–æ –≤–æ—Ç –¥–æ—Ä–æ–≥–∞ —Ç—É–¥–∞-–æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ 2 —á–∞—Å–∞ –ø—Ä–µ–≤—Ä–∞—â–∞–ª–∞—Å—å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ —Å—Ç–æ–π–∫–æ—Å—Ç—å.`}
          onChange={handleTextareaChange}
          className="w-full p-2 border border-gray-300 rounded-md mb-4 placeholder:whitespace-pre-wrap"
          rows={13}
        />
      </div>

      <div className="mb-4">
        <label htmlFor="rating" className="block mb-2">
          –û—Ü–µ–Ω–∫–∞
        </label>
        <div className="rating flex gap-2">
          {[...Array(10)].map((_, index) => (
            <span
              key={index + 1}
              className={`relative cursor-pointer mask mask-star-2 w-10 h-10 flex items-center justify-center ${
                rating >= index + 1 ? "bg-orange-400" : "bg-gray-300"
              }`}
              onClick={() => setRating(index + 1)}
            >
              <span className="absolute text-xs font-bold text-white">
                {index + 1}
              </span>
            </span>
          ))}
        </div>
      </div>

      {error && <p className="text-red-500 mb-4">{error}</p>}
      <div className="flex justify-between">
        <button type="button" className="btn btn-ghost" onClick={closeModal}>
          –û—Ç–º–µ–Ω–∞
        </button>
        <button
          type="submit"
          className="btn btn-primary"
          disabled={loading || !comment.trim() || rating === 0 || !position}
        >
          {loading ? "–û—Ç–ø—Ä–∞–≤–∫–∞..." : "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"}
        </button>
      </div>
    </form>
  );
}

export default CompaniesAddCommentModal;
